
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.raven.main;

import DAO.ChiTietHoaDonNhapDAO;
import DAO.HoaDonNhapDAO;
import DAO.NhanVienDAO1;
import DAO.SanPhamDAO;
import Entity.ChiTietHoaDonNhap;
import Entity.HoaDonNhap;
import Entity.NhanVien;
import Entity.SanPham;
import Helper.DateHelper;
import Helper.DialogHelper;
import Helper.ShareHelper;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.raven.notification.Notification;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javaswingdev.message.MessageDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author daung
 */
public class Scan extends javax.swing.JDialog implements Runnable, ThreadFactory {

    private WebcamPanel panel = null;
    private Webcam webcam = null;

    private PanelLoading loading;

    private static final long serialVersionUID = 6441489157408381878L;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    boolean running = true;
    BufferedImage image;

    HoaDonNhapDAO hdnhapDao = new HoaDonNhapDAO();
    ChiTietHoaDonNhapDAO chiTietHoaDonNhapDAO = new ChiTietHoaDonNhapDAO();
    SanPhamDAO sanPhamDAO = new SanPhamDAO();
    int SoluongMoi = 0;
//    NhanVien nv ; 
    NhanVienDAO1 dao;

    /**
     * Creates new form Scan
     */
    public Scan() {
        initComponents();
        setLocationRelativeTo(null);
        initWebcam();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(250, 250, 250));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(230, 230, 230)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 470, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        webcam.close();
        running = false;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        webcam.close();
        running = false;
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        try {
//            UIManager.setLookAndFeel(new FlatDarkPurpleIJTheme());
//        } catch (Exception ex) {
//            System.err.println("Failed to initialize LaF");
//        }
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Scan dialog = new Scan();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    void noti_infor(String noti) {
        new Notification(null, Notification.Type.INFO, Notification.Location.TOP_CENTER, noti).showNotification();

    }

    void noti_sucess(String noti) {
        new Notification(null, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, noti).showNotification();
    }

    void noti_warning(String noti) {
        new Notification(null, Notification.Type.WARNING, Notification.Location.TOP_CENTER, noti).showNotification();
    }

    Boolean noti_Choice(String tittle, String detail) {
        MessageDialog obj = new MessageDialog(null);
        obj.showMessage(tittle, detail);
        if (obj.getMessageType() == MessageDialog.MessageType.OK) {
            return true;
        } else {
            return false;
        }
    }

    private void initWebcam() {
        try {
            Dimension size = WebcamResolution.QVGA.getSize();
            webcam = Webcam.getWebcams().get(0); //0 is default webcam
            webcam.setViewSize(size);

            panel = new WebcamPanel(webcam);
            panel.setPreferredSize(size);
            panel.setFPSDisplayed(true);
            jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 300));
            executor.execute(this);
        } catch (Exception e) {
        }
    }

    @Override
    public void run() {
        do {
            try {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {

                }

                Result result = null;
                image = null;

                if (webcam.isOpen()) {
                    if ((image = webcam.getImage()) == null) {
                        continue;
                    }
                }

                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException e) {
                    //No result...
                }

                if (result != null) {
                    this.dispose();
                    System.out.println("" + result.getText());
                    String[] arr = result.getText().split(" ");
                    String Form_number = arr[0];
                    if (Form_number.equals("1")) {
                        String maNhanVien = arr[1];
                        String matKhau = arr[2];
                        System.out.println("" + maNhanVien.trim() + "--" + matKhau.trim());
                        new Main_Login(null, true, maNhanVien, matKhau);
                    } else {
                           Main_Multichoice_CTHDNhap form_multipleChoice = new Main_Multichoice_CTHDNhap(hdnhapDao.getSoPhieu(), true) ;
                        HoaDonNhap model = new HoaDonNhap();
                        model.setSoPhieu("");
                        model.setNgayNhap(DateHelper.toString(DateHelper.now(), "yyyy-MM-dd"));
                        try {
                            hdnhapDao.insert(model);
//                            noti_infor("thêm mới thành công");
new Notification(form_multipleChoice, Notification.Type.INFO, Notification.Location.TOP_CENTER, "Thêm mới thành công").showNotification();
//                            JOptionPane.showMessageDialog(this, "thêm mới thành công");
                        } catch (HeadlessException e) {
                            e.printStackTrace();
                        }
                        String soPhieu = hdnhapDao.getSoPhieu();

                        for (int i = 0; i < arr.length; i += 3) {
                            String maSanPham = arr[i];
                            System.out.println(maSanPham);
                            SanPham sanPham = sanPhamDAO.findById(maSanPham);
                            System.out.println(sanPham.toString());
                            int SoLuongKho = sanPham.getSoLuong();
                            System.out.println(SoLuongKho);
                            int soLuongNew = Integer.valueOf(arr[i + 1]);
                            System.out.println(soLuongNew);
                            int giaNhap = Integer.valueOf(arr[i + 2].trim());
                            System.out.println(giaNhap);
                            SoluongMoi = SoLuongKho + soLuongNew;
                            System.out.println("maSanPham: " + maSanPham + "  Soluong: " + soLuongNew + "  GiaNhap: " + giaNhap + "   SoLuongTong: " + SoluongMoi + "  SoLuongKho: " + SoLuongKho);
                            chiTietHoaDonNhapDAO.insert(soPhieu, maSanPham, soLuongNew, giaNhap);
//                            noti_infor("Thêm mới thành công");
//                            JOptionPane.showMessageDialog(this, "thêm mới thành công");
new Notification(form_multipleChoice, Notification.Type.INFO, Notification.Location.TOP_CENTER, "Thêm mới thành công").showNotification();
                            sanPhamDAO.update_soLuong(SoluongMoi, maSanPham);
//                            noti_infor("cập nhật số lượng kho thành công");
new Notification(form_multipleChoice, Notification.Type.INFO, Notification.Location.TOP_CENTER, "Thêm mới thành công").showNotification();
//                            JOptionPane.showMessageDialog(this, "cập nhật số lượng kho thành công");
new Notification(form_multipleChoice, Notification.Type.INFO, Notification.Location.TOP_CENTER, "Thêm mới thành công").showNotification();
                        }
 
                        form_multipleChoice.setVisible(true);
                    }

                    running = false;
                    webcam.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } while (running);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
